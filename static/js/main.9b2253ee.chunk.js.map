{"version":3,"sources":["Components/Subway.tsx","Components/GameOver.tsx","Components/StartButton.tsx","Components/Score.tsx","App.tsx","index.tsx"],"names":["Subway","holeNumber","display","onClick","maskFlag","Math","ceil","random","className","style","WebkitTransform","GameOver","gameOver","score","StartButton","buttonDisplay","buttonMessage","type","Score","lastMole","App","useState","1","2","3","4","5","6","7","8","9","state","setState","gameHasStarted","setGameHasStarted","moleHasBeenWhacked","setMoleHasBeenWhacked","setScore","setDisplay","setButtonMessage","setGameOver","setButtonDisplay","titleMargin","setTitleMargin","clearMoles","value","isNaN","Number","addToScore","e","target","parentNode","classList","add","window","setTimeout","parseInt","String","remove","margin","num","x","intervalID","setInterval","displayMoles","activeMole","clearInterval","startGame","holes","i","push","key","createMoleHoles","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9b2253ee.chunk.js","sourcesContent":["import React from 'react';\nimport noneBoyLeft from '../image/none-boy-left.png';\n\nlet randNum: number = 0;\nfunction setRandNum() {\n  randNum = Math.ceil(Math.random() * 2);\n}\n\nexport default function Subway({\n  holeNumber,\n  display,\n  onClick,\n  maskFlag,\n}: {\n  holeNumber: string;\n  display: string;\n  onClick: any;\n  maskFlag: number;\n}) {\n  setRandNum();\n\n  return (\n    <div className=\"game__hole\" style={{ display: display }}>\n      <div className=\"game__whack\">\n        <div\n          className={'game__mole' + 1}\n          onClick={onClick}\n          style={{ WebkitTransform: holeNumber }}\n        />\n        <div className=\"game__mound\" />\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function GameOver({\n  gameOver,\n  score,\n}: {\n  gameOver: string;\n  score: number;\n}) {\n  return (\n    <div className=\"game__game-over\" style={{ display: gameOver }}>\n      <h1 className=\"game__game-over-header\">GAME OVER!</h1>\n      <p className=\"game__you-scored\">You scored {score}</p>\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function StartButton({\n  onClick,\n  buttonDisplay,\n  buttonMessage,\n}: {\n  onClick: any;\n  buttonDisplay: string;\n  buttonMessage: string;\n}) {\n  return (\n    <button\n      className=\"game__start-button\"\n      type=\"button\"\n      onClick={onClick}\n      style={{ display: buttonDisplay }}\n    >\n      {buttonMessage}\n    </button>\n  );\n}\n","import React from 'react';\n\nexport default function Score({\n  display,\n  score,\n}: {\n  display: string;\n  score: number;\n}) {\n  return (\n    <div className=\"game__score\" style={{ display: display }}>\n      <h1>SCORE: {score}</h1>\n    </div>\n  );\n}\n","import React, { useState } from 'react';\nimport './App.css';\nimport Subway from './Components/Subway';\nimport GameOver from './Components/GameOver';\nimport StartButton from './Components/StartButton';\nimport Score from './Components/Score';\n\nlet lastMole: null | number = null;\n\nfunction App() {\n  const [state, setState] = useState({\n    1: 'translate(0, 110%)',\n    2: 'translate(0, 110%)',\n    3: 'translate(0, 110%)',\n    4: 'translate(0, 110%)',\n    5: 'translate(0, 110%)',\n    6: 'translate(0, 110%)',\n    7: 'translate(0, 110%)',\n    8: 'translate(0, 110%)',\n    9: 'translate(0, 110%)',\n  });\n  const [gameHasStarted, setGameHasStarted] = useState(false);\n  const [moleHasBeenWhacked, setMoleHasBeenWhacked] = useState(false);\n  const [score, setScore] = useState(0);\n\n  const [display, setDisplay] = useState('none');\n  const [buttonMessage, setButtonMessage] = useState('Start Game');\n  const [gameOver, setGameOver] = useState('none');\n  const [buttonDisplay, setButtonDisplay] = useState('inline-block');\n  const [titleMargin, setTitleMargin] = useState('15px');\n\n  function timeOut(num: number) {\n    if (gameHasStarted) {\n      return;\n    }\n    setButtonDisplay('none');\n    setDisplay('block');\n    setGameOver('none');\n    setTitleMargin('0px');\n    window.setTimeout(() => {\n      startGame();\n    }, num);\n  }\n\n  function startGame() {\n    if (gameHasStarted) {\n      return;\n    }\n    setGameHasStarted(true);\n    setScore(0);\n\n    let x = 0;\n    const intervalID = setInterval(() => {\n      displayMoles();\n      if (++x === 16) {\n        window.clearInterval(intervalID);\n        clearMoles();\n        setGameHasStarted(false);\n        window.setTimeout(() => {\n          setDisplay('none');\n          setGameOver('block');\n          setButtonMessage('Play Again');\n          setButtonDisplay('inline-block');\n          setTitleMargin('15px');\n        }, 850);\n      }\n    }, 700);\n  }\n\n  function clearMoles() {\n    for (let value in state) {\n      if (!isNaN(Number(value))) {\n        setState({\n          ...state,\n          [value]: 'translate(0, 110%)',\n        });\n      }\n    }\n  }\n\n  function displayMoles() {\n    let activeMole = Math.ceil(Math.random() * 9);\n    if (lastMole === activeMole) {\n      displayMoles();\n      return;\n    }\n    clearMoles();\n    setState({\n      ...state,\n      [activeMole]: 'translate(0, 15%)',\n    });\n    lastMole = activeMole;\n  }\n\n  function lockOutClick() {\n    window.setTimeout(() => {\n      setMoleHasBeenWhacked(false);\n    }, 350);\n  }\n\n  function addToScore(e: any) {\n    if (moleHasBeenWhacked) {\n      return;\n    }\n    let target = e.target;\n    target.parentNode.classList.add('game__cross1');\n    target.classList.add('no-background');\n    lockOutClick();\n    setMoleHasBeenWhacked(true);\n    setScore(parseInt(String(score), 10) + 1);\n    window.setTimeout(function () {\n      target.parentNode.classList.remove('game__cross1');\n      target.classList.remove('no-background');\n    }, 500);\n  }\n\n  function createMoleHoles() {\n    let holes = [];\n    for (let i = 1; i <= 9; i++) {\n      holes.push(\n        <Subway\n          onClick={addToScore}\n          // @ts-ignore\n          holeNumber={state[i]}\n          display={display}\n          maskFlag={1}\n          key={i}\n        />\n      );\n    }\n    return <div className=\"board\">{holes}</div>;\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"main-container\">\n        <div className={'flash-game'}>\n          <div className=\"game\">\n            <h1 className=\"game__title\" style={{ margin: titleMargin }}>\n              Covid-19-Prevention\n            </h1>\n            <GameOver score={score} gameOver={gameOver} />\n            <div className=\"game__button-container\">\n              <StartButton\n                buttonDisplay={buttonDisplay}\n                buttonMessage={buttonMessage}\n                onClick={timeOut}\n              />\n            </div>\n            {createMoleHoles()}\n            <Score score={score} display={display} />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n// 9개의 구멍을 만든다 (컴포넌트)\n// 시작 버튼 누르면 0.7초마다 랜덤숫자(1~9)를 생성해 해당 컴포넌트를 올리고 다른 컴포넌트를 내린다.\n// 15번이 반복되면 end\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}